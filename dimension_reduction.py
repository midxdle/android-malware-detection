import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.feature_selection import SelectKBest, chi2, mutual_info_classif
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("amd.csv", low_memory=False)
label_model = LabelEncoder()
data = data.apply(label_model.fit_transform)
X = data.drop(['class'], axis = 1)
y = data['class']

def linear_dimension_reduction_pca(X, s):
     pca = PCA(n_components=s)
     X_reduced = pca.fit_transform(X)
     return X_reduced

def chi_squared_dimension_reduction(X, y, s):
    chi2_selector = SelectKBest(score_func=chi2, k=s)
    X_reduced = chi2_selector.fit_transform(X, y)
    return X_reduced

def correlation_dimension_reduction(X, s):
    X = np.array(X)
    corr_matrix = np.corrcoef(X, rowvar=False)
    corr_vals = np.abs(corr_matrix[-1, :-1])
    selected_features = np.argsort(corr_vals)[-s:]
    X_reduced = X[:, selected_features]
    return X_reduced

def information_gain_dimension_reduction(X, y, s):
    info_gain_selector = SelectKBest(score_func=mutual_info_classif, k=s)
    X_reduced = info_gain_selector.fit_transform(X, y)
    return X_reduced

def apply_dimension_reduction(X, y, num_components):
    covariance_matrix = np.cov(X, rowvar=False)
    
    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)
    
    sorted_indices = np.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[sorted_indices]
    eigenvectors = eigenvectors[:, sorted_indices]
    
    selected_eigenvectors = eigenvectors[:, :num_components]
    
    reduced_features = np.dot(X, selected_eigenvectors)
    
    reduced_dataset = reduced_features
    return reduced_dataset

s = 5 

X_pca = linear_dimension_reduction_pca(X, s)
X_chi2 = chi_squared_dimension_reduction(X, y, s)
X_corr = correlation_dimension_reduction(X, s)
X_info_gain = information_gain_dimension_reduction(X, y, s)
reduced_dataset = apply_dimension_reduction(X, y, s)

print("\nPCA Reduced Data:", '\n')
print(X_pca)

print("\nChi-Squared Reduced Data:", '\n')
print(X_chi2)

print("\nCorrelation Reduced Data:", '\n')
print(X_corr)

print("\nInformation Gain Reduced Data:", '\n')
print(X_info_gain)

print("\nReduced Dataset:", '\n')
print(reduced_dataset)
