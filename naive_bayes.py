import numpy as np
from collections import Counter
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score

class NaiveBayesClassifier:
    def __init__(self):
        self.class_probs = {}
        self.feature_probs = {}

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.classes = np.unique(y)

        for c in self.classes:
            class_indices = np.where(y == c)
            self.class_probs[c] = len(class_indices[0]) / n_samples

            X_class = X[class_indices]
            for j in range(n_features):
                feature_values = X_class[:, j]
                self.feature_probs[(j, c)] = self.calculate_feature_prob(feature_values)

    def calculate_feature_prob(self, feature_values):
        feature_prob = Counter(feature_values)
        total_count = len(feature_values)
        for value in feature_prob:
            feature_prob[value] /= total_count
        return feature_prob

    def predict(self, X):
        predictions = []
        for sample in X:
            max_prob = -1
            predicted_class = None
            for c in self.classes:
                prob = self.class_probs[c]
                for j, value in enumerate(sample):
                    feature_prob = self.feature_probs[(j, c)]
                    if value in feature_prob:
                        prob *= feature_prob[value]
                    else:
                        prob *= 0
                if prob > max_prob:
                    max_prob = prob
                    predicted_class = c
            predictions.append(predicted_class)
        return np.array(predictions)

data = pd.read_csv("amd.csv", low_memory=False)
label_model = LabelEncoder()
data = data.apply(label_model.fit_transform)
X = data.drop(['class'], axis = 1)
y = data['class']
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=23)

y = np.array(y)
X = np.array(X)
nb_classifier = NaiveBayesClassifier()
nb_classifier.fit(X, y)

x_test = np.array(x_test)
x_train = np.array(x_train)
y_test = np.array(y_test)
y_train = np.array(y_train)

Y_prediction = nb_classifier.predict(x_test)
print('\nACCURACY SCORE = ', accuracy_score(y_test, Y_prediction), '\n')
print('PRECISION SCORE = ', precision_score(y_test, Y_prediction, average = None), '\n')
print('RECALL SCORE = ', recall_score(y_test, Y_prediction, average = None), '\n')
print('CONFUSION MATRIX = \n', confusion_matrix(y_test, Y_prediction), '\n')
print(classification_report(y_test, Y_prediction, zero_division = 1))
