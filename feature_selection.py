import numpy as np
from itertools import combinations
import pandas as pd
from sklearn.preprocessing import LabelEncoder

class FeatureSelection:
    def __init__(self, dataset, k, selection_strategy):
        self.dataset = dataset
        self.k = k
        self.selection_strategy = selection_strategy

    def Normalize(self, data):
        normalized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)
        return normalized_data

    def Compare_first(self, data, k):
        scores = np.mean(np.abs(data), axis=0)
        selected_features = np.argsort(scores)[::-1][:k]
        return selected_features

    def Compare_second(self, data, k):
        scores = np.var(data, axis=0)
        selected_features = np.argsort(scores)[:k]
        return selected_features

    def Compare_third(self, data, k):
        max_score = 0
        selected_features = []
        for feature_subset in combinations(range(data.shape[1]), k):
            subset_score = np.mean(np.abs(data[:, feature_subset]))
            if subset_score > max_score:
                max_score = subset_score
                selected_features = feature_subset
        return selected_features

    def Compare_fourth(self, data, k):
        scores = np.sum(data, axis=0)
        selected_features = np.argsort(scores)[::-1][:k]
        return selected_features

    def SelectFeatures(self):
        normalized_data = self.Normalize(self.dataset)

        if self.selection_strategy == 1:
            selected_features = self.Compare_first(normalized_data, self.k)
        elif self.selection_strategy == 2:
            selected_features = self.Compare_second(normalized_data, self.k)
        elif self.selection_strategy == 3:
            selected_features = self.Compare_third(normalized_data, self.k)
        elif self.selection_strategy == 4:
            selected_features = self.Compare_fourth(normalized_data, self.k)
        else:
            raise ValueError("Invalid selection strategy")

        return selected_features

data = pd.read_csv("amd.csv", low_memory=False)
label_model = LabelEncoder()
data = data.apply(label_model.fit_transform)
k = 5
s = 2

feature_selector = FeatureSelection(dataset=data, k=k, selection_strategy=s)

selected_features = feature_selector.SelectFeatures()
print("Selected Features:", selected_features)
